<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React Bites on </title>
    <link>/</link>
    <description>Recent content in React Bites on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adjacent JSX elements must be wrapped in an enclosing tag.</title>
      <link>/adjacent-jsx-elements-wrapped-enclosing-tag-react-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/adjacent-jsx-elements-wrapped-enclosing-tag-react-error/</guid>
      <description>Test.</description>
    </item>
    
    <item>
      <title>How To Create React Components, Part 1: Functional Components</title>
      <link>/create-functional-component-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/create-functional-component-tutorial/</guid>
      <description>In this tutorial, we&amp;rsquo;re going to create our first React component. There&amp;rsquo;s a lot to learn about how components work and are created, and we&amp;rsquo;re not going to cover all of the details right away, but we are going to lay strong foundations for further learning.
Component Types The first thing to understand is that, in React, there are two types of components:
 functional components class components  Ultimately, both of these types of components serve the same purpose, in that they&amp;rsquo;re designed to render a part of an interface.</description>
    </item>
    
    <item>
      <title>How To Create React Components, Part 2: Class Components</title>
      <link>/create-class-component-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/create-class-component-tutorial/</guid>
      <description>In this tutorial, we&amp;rsquo;re going to talk about class components, which are the more flexible type of React component. Ultimately, they achieve the same thing as a functional component, in that they render a piece of an interface, but they also provide us with some additional features.
Project Setup To begin, create a new React project with create-react-app:
create-react-app class-component-example  &amp;hellip;and launch the local server:
cd class-component-example yarn start  You&amp;rsquo;ll now be able to view the project at http://localhost:3000.</description>
    </item>
    
    <item>
      <title>How To Create a &#34;Hello World&#34; Example in React</title>
      <link>/hello-world-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hello-world-tutorial/</guid>
      <description>In this tutorial, we&amp;rsquo;re going to create a &amp;ldquo;Hello World&amp;rdquo; example with React. This will be the simplest possible interface that can be created with React.
The goal is to render the words &amp;ldquo;Hello World&amp;rdquo; onto a page, with those words being wrapped between a pair of h1 tags. That probably doesn&amp;rsquo;t sound like the world&amp;rsquo;s fanciest interface, and it won&amp;rsquo;t be, but it will give us a chance to explore a couple of important details about developing with React.</description>
    </item>
    
    <item>
      <title>How To Include Components Inside Other Components</title>
      <link>/include-component-inside-other-components-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/include-component-inside-other-components-tutorial/</guid>
      <description>In this tutorial, we&amp;rsquo;re going to learn how to include components inside other components. This is an essential aspect of using React, as it allows us to build components that can be used (and reused) in different contexts, significantly reducing the amount of code we have to write and maintain.
To begin, create a new React project with create-react-app:
create-react-app including-components-demo  &amp;hellip;and launch the local server:
cd including-components-demo yarn start  You&amp;rsquo;ll now be able to view the project at http://localhost:3000.</description>
    </item>
    
    <item>
      <title>How To Pass Data into Components with Props</title>
      <link>/pass-data-between-components-props-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pass-data-between-components-props-tutorial/</guid>
      <description>In this tutorial, we&amp;rsquo;re going to talk about how to pass data between components by using a feature of React known as &amp;ldquo;props&amp;rdquo;. This is a critical feature to understand as props allow us to create components that can be reused in different contexts.
Before continuing, it&amp;rsquo;s important to understand:
 How To Create a React Project with create-react-app How To Create Functional Components How To Create Class Components How To Include Components Inside Other Components  Project Setup To begin, create a new React project with create-react-app:</description>
    </item>
    
    <item>
      <title>Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.</title>
      <link>/rendering-components-directly-document-body-react-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/rendering-components-directly-document-body-react-error/</guid>
      <description>Test.</description>
    </item>
    
  </channel>
</rss>